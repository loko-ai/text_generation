{
  "name": "text_generation",
  "id": "text_generation",
  "description": "",
  "created_on": "11/11/2022, 11:06:44",
  "last_modify": "02/05/2023, 15:46:56",
  "graphs": {
    "main": {
      "nodes": [
        {
          "id": "20b91e6b-189e-4275-86c8-cbec52ead6f0",
          "position": {
            "x": 846,
            "y": 117
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "hf",
            "events": null,
            "description": "",
            "inputs": [
              {
                "id": "input",
                "label": "input",
                "service": "",
                "to": "output"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Custom",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                }
              ],
              "click": null,
              "icon": "RiCheckboxBlankCircleFill",
              "values": {
                "debug": false
              }
            }
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 846,
            "y": 117
          },
          "__class__": "Node"
        },
        {
          "id": "9d3a7034-dfe6-4ac6-a92b-a21789af2337",
          "position": {
            "x": 604,
            "y": 85
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Trigger",
            "events": null,
            "description": "### Description\nThe TRIGGER component is used to start streams.\n\n### Output\nThe parameter Type can be set as a **String** or an **Object**. The parameter Value, on the other hand, defines the actual output of the component.",
            "inputs": [],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "type",
                  "type": "select",
                  "description": "The type of data",
                  "label": "Type",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": [
                    "String",
                    "Object"
                  ],
                  "value": null
                },
                {
                  "name": "value",
                  "type": "dynamic",
                  "dynamicType": {
                    "String": "area",
                    "Object": "code"
                  },
                  "parent": "type",
                  "label": "Value",
                  "validation": {
                    "required": "Required field"
                  }
                }
              ],
              "click": "Send message",
              "icon": "RiPlayFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "type": "String",
                "value": "your product was "
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "__class__": "Node"
        },
        {
          "id": "b8e0b1f4-ff2e-4093-be68-02da3399cda0",
          "position": {
            "x": 1142,
            "y": 92
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Selector",
            "events": null,
            "description": "### Description\nThe SELECTOR component is used to select the value of one or more object keys. The required key/s are defined using the parameter **Keys**.\n\nIn order to add other keys you need to click on the **\"Add field\"** button.\n\nIf the field **Ignore Error** is toggled, missing keys are ignored.\n\nIt's also possible to select nested key, just by writing them in a *key* field, and seperating them using a full stop. Let's consider the object in the example below: if you want to have access to the content of the \"key3\" object, you need to use the following notation \"key1.key2.key3\".\n\n\n```json\n {\"key1\":{\"key2\":{\"key3\":[\"val1\", \"val2\", \"val3\"]}}} \n```\n\n\n\n### Input\n\nThe input consists of a dictionary.\n\n\n\n### Output\n\nThe output is the value of the required key of the dictionary received as input, if only one key is selected; otherwise it's an object which contains the keys specified and their value.\n",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "ignore_err",
                  "label": "Ignor Error",
                  "type": "boolean",
                  "description": "Choose whether to ignore error in case of a missing key or not"
                },
                {
                  "name": "exclude",
                  "label": "Exclude Keys",
                  "type": "boolean",
                  "description": "If enabled, the output contains the whole input object excluding the specified keys; otherwise, only the specified keys are returned"
                },
                {
                  "name": "keys",
                  "label": "Keys",
                  "type": "multiKeyValue",
                  "validation": {
                    "required": "Required field"
                  },
                  "description": "Name of the key/s to select from the incoming message",
                  "fields": [
                    {
                      "name": "k",
                      "placeholder": "key",
                      "validation": {
                        "required": "Required field"
                      }
                    }
                  ]
                }
              ],
              "click": null,
              "icon": "RiCursorFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "ignore_err": false,
                "exclude": false,
                "keys": [
                  {
                    "k": "generated_text",
                    "id": "6c02805b-c45f-4df5-9b99-eafe95911e32"
                  }
                ]
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1046,
            "y": 86
          },
          "__class__": "Node"
        },
        {
          "id": "73e689c6-7c5a-4e13-b4af-13dd9131481e",
          "position": {
            "x": 1210,
            "y": 283
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "pname": "zero_shot_ext",
            "name": "zeroshot",
            "events": null,
            "description": "",
            "inputs": [
              {
                "id": "input",
                "label": "input",
                "service": "",
                "to": "output"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": null,
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                }
              ],
              "click": null,
              "icon": null,
              "values": {
                "debug": true
              }
            }
          },
          "selectable": true,
          "draggable": true,
          "__class__": "Node"
        }
      ],
      "edges": [
        {
          "id": "reactflow__edge-9d3a7034-dfe6-4ac6-a92b-a21789af2337output-20b91e6b-189e-4275-86c8-cbec52ead6f0input",
          "source": "9d3a7034-dfe6-4ac6-a92b-a21789af2337",
          "sourceHandle": "output",
          "target": "20b91e6b-189e-4275-86c8-cbec52ead6f0",
          "targetHandle": "input",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-20b91e6b-189e-4275-86c8-cbec52ead6f0output-b8e0b1f4-ff2e-4093-be68-02da3399cda0input",
          "source": "20b91e6b-189e-4275-86c8-cbec52ead6f0",
          "sourceHandle": "output",
          "target": "b8e0b1f4-ff2e-4093-be68-02da3399cda0",
          "targetHandle": "input",
          "data": {
            "startColor": "#888",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-b8e0b1f4-ff2e-4093-be68-02da3399cda0output-73e689c6-7c5a-4e13-b4af-13dd9131481einput",
          "source": "b8e0b1f4-ff2e-4093-be68-02da3399cda0",
          "sourceHandle": "output",
          "target": "73e689c6-7c5a-4e13-b4af-13dd9131481e",
          "targetHandle": "input",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        }
      ],
      "__class__": "Graph"
    },
    "text_generator": {
      "nodes": [
        {
          "id": "9e8b8989-f745-4a66-be91-3c1f267760d8",
          "position": {
            "x": 457,
            "y": 285
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Trigger",
            "events": null,
            "description": "### Description\nThe TRIGGER component is used to start streams.\n\n### Output\nThe parameter Type can be set as a **String** or an **Object**. The parameter Value, on the other hand, defines the actual output of the component.",
            "inputs": [],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "type",
                  "type": "select",
                  "description": "The type of data",
                  "label": "Type",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": [
                    "String",
                    "Object"
                  ],
                  "value": null
                },
                {
                  "name": "value",
                  "type": "dynamic",
                  "dynamicType": {
                    "String": "area",
                    "Object": "code"
                  },
                  "parent": "type",
                  "label": "Value",
                  "validation": {
                    "required": "Required field"
                  }
                }
              ],
              "click": "Send message",
              "icon": "RiPlayFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "type": "String",
                "value": " Your product is very"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 457,
            "y": 285
          },
          "__class__": "Node"
        },
        {
          "id": "b850ec52-2c32-4043-b894-25af03f77a44",
          "position": {
            "x": 737.0991717747153,
            "y": 296.6412844320738
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "TextGenerator",
            "events": null,
            "description": "\nThis extensions offers the possibility to use a block, TextGenerator, that as the name implies, will generate some text. \n\n\nYou can decide a text to use as starting point, and you can also specify other parameters too:\n\n- **Model:** the model name to use for generating your text. The default model in use is \"gpt2\", but you can choose among all the ones related to the huggingface's text generation task (listed here https://huggingface.co/models?pipeline_tag=text-generation);  \n- **Sentence Maximum Length:** maximum lenght of the generated sentence;\n- **Sampling:** whether to sample words, randomly picking the next ones\n  according to their conditional probability distribution, or to pick them in a deterministic way;\n- **Temperature:** value between 0 and 1, that will sharp the probability distribution, increasing the  likelihood of high probability words and decreasing the likelihood of low probability words. Essentially, applying this parameter the generation of word will be less random: with temperature close to 0, the most probable word will be selected, and the randomness will be dropped;\n- **No Repeat N-Gram size:** choose the size of the N-Grams; all N-Grams of that size can only occur once.\n\n\n\n\nYou can decide to use these functionalities importing the \"TextGenerator\" block in your workflow or to use directly the GUI.\n",
            "inputs": [
              {
                "id": "text_generator",
                "label": "Text Generator",
                "service": "text_gen",
                "to": "text_generator"
              }
            ],
            "outputs": [
              {
                "id": "text_generator",
                "label": "Text Generator"
              }
            ],
            "configured": true,
            "options": {
              "group": "Custom",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "model",
                  "type": "text",
                  "label": "Transforme Models",
                  "helper": "Default model \"gpt2\". Type the name of the huggingface model you want to use, selecting among the ones available for the text-generation task (check the list here: https://huggingface.co/models?pipeline_tag=text-generation)",
                  "group": "",
                  "value": "gpt2",
                  "description": "",
                  "validation": null
                },
                {
                  "name": "max_length",
                  "type": "number",
                  "label": "Sentence Max Length",
                  "helper": "Integer number",
                  "group": "",
                  "value": 100,
                  "description": "",
                  "validation": null
                },
                {
                  "name": "ngram_size",
                  "type": "number",
                  "label": "No Repeat N-Gram size",
                  "helper": "Integer number",
                  "group": "",
                  "value": 2,
                  "description": "",
                  "validation": null
                },
                {
                  "name": "do_sample",
                  "type": "boolean",
                  "label": "Sampling",
                  "helper": "",
                  "group": "",
                  "value": true,
                  "description": "If false, the text will be generated in a deterministic way. Otherwise, the words will be picked according to their conditional probability.",
                  "validation": null
                },
                {
                  "name": "temperature",
                  "type": "dynamic",
                  "label": "Temperature",
                  "helper": "Float positive number. Max value 1.0",
                  "group": "",
                  "value": 0.3,
                  "description": "With temperature=1, all the words will be picked only considering their probability. Lower \"Temperature\" values will make the distribution less random. The sentence will probabily be more logic, but with long text you can encounter more repetition. Use your perfect trade-off value.",
                  "validation": null,
                  "parent": "do_sample",
                  "condition": "{parent}===true",
                  "dynamicType": "number",
                  "options": null,
                  "fields": null,
                  "url": null
                }
              ],
              "click": null,
              "icon": "RiFileList3Fill",
              "values": {
                "model": "gpt2",
                "max_length": 100,
                "ngram_size": 2,
                "do_sample": true,
                "temperature": 0.3,
                "debug": true
              }
            }
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 737.0991717747153,
            "y": 296.6412844320738
          },
          "__class__": "Node"
        }
      ],
      "edges": [
        {
          "id": "reactflow__edge-9e8b8989-f745-4a66-be91-3c1f267760d8output-b850ec52-2c32-4043-b894-25af03f77a44text_generator",
          "source": "9e8b8989-f745-4a66-be91-3c1f267760d8",
          "sourceHandle": "output",
          "target": "b850ec52-2c32-4043-b894-25af03f77a44",
          "targetHandle": "text_generator",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        }
      ],
      "__class__": "Graph"
    }
  },
  "open": [
    "main"
  ],
  "active": "main",
  "version": "1.0.0",
  "__class__": "Project"
}